{"version":3,"file":"game.b73393581e7e1b78a177.js","mappings":"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","sources":["webpack://simplechessapp/./public/js/game.js"],"sourcesContent":["let board = null;\nlet game = new Chess();\nlet socket = null;\nlet playerColor = 'white';\nlet currentTurn = 'white';\nlet moveHistory = [];\nlet timers = {\n    white: null,\n    black: null\n};\n\n// Initialize the game board\nfunction initializeBoard() {\n    const config = {\n        draggable: true,\n        position: 'start',\n        onDragStart: onDragStart,\n        onDrop: onDrop,\n        onSnapEnd: onSnapEnd,\n        pieceTheme: '/img/pieces/{piece}.png'\n    };\n\n    board = Chessboard('board', config);\n    window.addEventListener('resize', board.resize);\n}\n\n// Handle piece drag start\nfunction onDragStart(source, piece) {\n    if (game.game_over()) return false;\n    if (currentTurn !== playerColor) return false;\n    if ((playerColor === 'white' && piece.search(/^b/) !== -1) ||\n        (playerColor === 'black' && piece.search(/^w/) !== -1)) {\n        return false;\n    }\n}\n\n// Handle piece drop\nfunction onDrop(source, target) {\n    const move = game.move({\n        from: source,\n        to: target,\n        promotion: 'q'\n    });\n\n    if (move === null) return 'snapback';\n\n    currentTurn = currentTurn === 'white' ? 'black' : 'white';\n    updateStatus();\n    \n    if (socket) {\n        socket.emit('move', {\n            from: source,\n            to: target,\n            promotion: 'q'\n        });\n    }\n}\n\n// Handle piece snap end\nfunction onSnapEnd() {\n    board.position(game.fen());\n}\n\n// Update game status\nfunction updateStatus() {\n    let status = '';\n    let moveColor = game.turn() === 'w' ? 'White' : 'Black';\n\n    if (game.in_checkmate()) {\n        status = `Game over, ${moveColor} is in checkmate.`;\n    } else if (game.in_draw()) {\n        status = 'Game over, drawn position';\n    } else {\n        status = `${moveColor} to move`;\n        if (game.in_check()) {\n            status += `, ${moveColor} is in check`;\n        }\n    }\n\n    document.getElementById('gameStatus').textContent = status;\n    updateMoveList();\n}\n\n// Update move list\nfunction updateMoveList() {\n    const moves = game.history({ verbose: true });\n    const movesList = document.getElementById('movesList');\n    movesList.innerHTML = '';\n\n    for (let i = 0; i < moves.length; i += 2) {\n        const moveNumber = Math.floor(i / 2) + 1;\n        const whiteMove = moves[i];\n        const blackMove = moves[i + 1];\n\n        const moveElement = document.createElement('div');\n        moveElement.className = 'move-pair';\n        moveElement.innerHTML = `\n            ${moveNumber}. ${whiteMove.san}\n            ${blackMove ? ' ' + blackMove.san : ''}\n        `;\n        movesList.appendChild(moveElement);\n    }\n\n    movesList.scrollTop = movesList.scrollHeight;\n}\n\n// Initialize timers\nfunction initializeTimers() {\n    const initialTime = gameConfig.timeControl.initial;\n    timers = {\n        white: initialTime,\n        black: initialTime\n    };\n\n    updateTimerDisplay('white');\n    updateTimerDisplay('black');\n}\n\n// Update timer display\nfunction updateTimerDisplay(color) {\n    const minutes = Math.floor(timers[color] / 60);\n    const seconds = timers[color] % 60;\n    const display = `${minutes}:${seconds.toString().padStart(2, '0')}`;\n    document.querySelector(`.${color}-timer`).textContent = display;\n}\n\n// Initialize socket connection\nfunction initializeSocket() {\n    socket = io();\n\n    socket.on('connect', () => {\n        socket.emit('join', {\n            type: gameConfig.type,\n            mode: gameConfig.mode,\n            guestId: gameConfig.guestId,\n            guestUsername: gameConfig.guestUsername\n        });\n    });\n\n    socket.on('gameStart', (data) => {\n        playerColor = data.color;\n        document.getElementById('whiteUsername').textContent = data.white;\n        document.getElementById('blackUsername').textContent = data.black;\n        \n        if (playerColor === 'black') {\n            board.orientation('black');\n        }\n\n        document.getElementById('resignBtn').disabled = false;\n        document.getElementById('drawBtn').disabled = false;\n        initializeTimers();\n    });\n\n    socket.on('move', (move) => {\n        game.move(move);\n        board.position(game.fen());\n        currentTurn = game.turn() === 'w' ? 'white' : 'black';\n        updateStatus();\n    });\n\n    socket.on('gameOver', (data) => {\n        alert(data.message);\n        document.getElementById('resignBtn').disabled = true;\n        document.getElementById('drawBtn').disabled = true;\n    });\n}\n\n// Initialize analysis panel\nfunction initializeAnalysis() {\n    const analysisBtn = document.getElementById('analysisBtn');\n    const closeAnalysisBtn = document.getElementById('closeAnalysisBtn');\n    const analyzeBtn = document.getElementById('analyzeBtn');\n    const getBestMoveBtn = document.getElementById('getBestMoveBtn');\n    const analysisPanel = document.getElementById('analysisPanel');\n\n    analysisBtn.addEventListener('click', () => {\n        analysisPanel.classList.toggle('hidden');\n    });\n\n    closeAnalysisBtn.addEventListener('click', () => {\n        analysisPanel.classList.add('hidden');\n    });\n\n    analyzeBtn.addEventListener('click', () => {\n        socket.emit('analyze', { fen: game.fen() });\n    });\n\n    getBestMoveBtn.addEventListener('click', () => {\n        socket.emit('getBestMove', { fen: game.fen() });\n    });\n\n    socket.on('analysis', (data) => {\n        document.getElementById('evaluation').textContent = `Evaluation: ${data.evaluation}`;\n        document.getElementById('bestLine').textContent = `Best line: ${data.bestLine}`;\n    });\n}\n\n// Initialize game controls\nfunction initializeControls() {\n    const resignBtn = document.getElementById('resignBtn');\n    const drawBtn = document.getElementById('drawBtn');\n    const flipBoardBtn = document.getElementById('flipBoardBtn');\n    const findOpponentBtn = document.getElementById('findOpponentBtn');\n\n    resignBtn.addEventListener('click', () => {\n        if (confirm('Are you sure you want to resign?')) {\n            socket.emit('resign');\n        }\n    });\n\n    drawBtn.addEventListener('click', () => {\n        socket.emit('offerDraw');\n    });\n\n    flipBoardBtn.addEventListener('click', () => {\n        board.flip();\n    });\n\n    if (findOpponentBtn) {\n        findOpponentBtn.addEventListener('click', () => {\n            socket.emit('findOpponent');\n            findOpponentBtn.disabled = true;\n            findOpponentBtn.textContent = 'Finding opponent...';\n        });\n    }\n}\n\n// Initialize move navigation\nfunction initializeMoveNavigation() {\n    const prevMove = document.getElementById('prevMove');\n    const nextMove = document.getElementById('nextMove');\n\n    prevMove.addEventListener('click', () => {\n        game.undo();\n        board.position(game.fen());\n        updateStatus();\n    });\n\n    nextMove.addEventListener('click', () => {\n        // TODO: Implement move forward functionality\n    });\n}\n\n// Start the game\ndocument.addEventListener('DOMContentLoaded', () => {\n    initializeBoard();\n    initializeSocket();\n    initializeControls();\n    initializeMoveNavigation();\n    updateStatus();\n}); "],"names":["board","game","Chess","socket","playerColor","currentTurn","timers","white","black","onDragStart","source","piece","game_over","search","onDrop","target","move","from","to","promotion","updateStatus","emit","onSnapEnd","position","fen","status","moveColor","turn","in_checkmate","concat","in_draw","in_check","document","getElementById","textContent","moves","history","verbose","movesList","innerHTML","i","length","moveNumber","Math","floor","whiteMove","blackMove","moveElement","createElement","className","san","appendChild","scrollTop","scrollHeight","updateMoveList","updateTimerDisplay","color","minutes","seconds","display","toString","padStart","querySelector","initializeSocket","io","on","type","gameConfig","mode","guestId","guestUsername","data","orientation","disabled","initialTime","timeControl","initial","initializeTimers","alert","message","addEventListener","Chessboard","draggable","pieceTheme","window","resize","resignBtn","drawBtn","flipBoardBtn","findOpponentBtn","confirm","flip","initializeControls","prevMove","nextMove","undo","initializeMoveNavigation"],"sourceRoot":""}