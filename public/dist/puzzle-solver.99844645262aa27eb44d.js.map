{"version":3,"file":"puzzle-solver.99844645262aa27eb44d.js","mappings":"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","sources":["webpack://simplechessapp/./public/js/puzzle-solver.js"],"sourcesContent":["class PuzzleSolver {\n    constructor() {\n        this.board = null;\n        this.game = new Chess();\n        this.currentPuzzle = null;\n        this.previousMoves = [];\n        this.startTime = null;\n        this.isComplete = false;\n\n        // DOM elements\n        this.elements = {\n            board: document.getElementById('board'),\n            title: document.getElementById('puzzleTitle'),\n            description: document.getElementById('puzzleDescription'),\n            rating: document.getElementById('puzzleRating'),\n            themes: document.getElementById('puzzleThemes'),\n            moveList: document.getElementById('moveList'),\n            status: document.getElementById('status'),\n            resetBtn: document.getElementById('resetBtn'),\n            hintBtn: document.getElementById('hintBtn'),\n            nextBtn: document.getElementById('nextBtn')\n        };\n\n        this.initializeBoard();\n        this.setupEventListeners();\n        this.loadPuzzle();\n    }\n\n    initializeBoard() {\n        const config = {\n            draggable: true,\n            position: 'start',\n            onDragStart: this.onDragStart.bind(this),\n            onDrop: this.onDrop.bind(this),\n            onSnapEnd: this.onSnapEnd.bind(this),\n            pieceTheme: '/img/pieces/{piece}.png'\n        };\n\n        this.board = Chessboard(this.elements.board, config);\n        window.addEventListener('resize', () => this.board.resize());\n    }\n\n    setupEventListeners() {\n        this.elements.resetBtn.addEventListener('click', () => this.resetPuzzle());\n        this.elements.hintBtn.addEventListener('click', () => this.getHint());\n        this.elements.nextBtn.addEventListener('click', () => this.loadNextPuzzle());\n    }\n\n    async loadPuzzle() {\n        try {\n            const puzzleId = window.location.pathname.split('/').pop();\n            const response = await fetch(`/api/puzzles/${puzzleId}`);\n            if (!response.ok) throw new Error('Failed to load puzzle');\n            \n            const puzzle = await response.json();\n            this.setPuzzle(puzzle);\n        } catch (error) {\n            console.error('Error loading puzzle:', error);\n            this.updateStatus('Failed to load puzzle', 'error');\n        }\n    }\n\n    setPuzzle(puzzle) {\n        this.currentPuzzle = puzzle;\n        this.game.load(puzzle.fen);\n        this.board.position(puzzle.fen);\n        this.previousMoves = [];\n        this.isComplete = false;\n        this.startTime = Date.now();\n\n        // Update UI\n        this.elements.title.textContent = puzzle.title || 'Chess Puzzle';\n        this.elements.description.textContent = puzzle.description;\n        this.elements.rating.textContent = puzzle.rating;\n        this.elements.themes.textContent = puzzle.themes.join(', ');\n        this.elements.moveList.innerHTML = '';\n        this.elements.nextBtn.style.display = 'none';\n\n        this.updateStatus('Your turn to move');\n    }\n\n    async validateMove(move) {\n        try {\n            const response = await fetch(`/api/puzzles/${this.currentPuzzle.id}/validate`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    move: `${move.from}${move.to}${move.promotion || ''}`,\n                    position: this.game.fen(),\n                    previousMoves: this.previousMoves\n                })\n            });\n\n            if (!response.ok) throw new Error('Failed to validate move');\n            const result = await response.json();\n\n            if (result.correct) {\n                this.previousMoves.push(move);\n                this.addMoveToHistory(move);\n\n                if (result.completed) {\n                    this.onPuzzleSolved();\n                } else if (result.nextMove) {\n                    // Make opponent's move after a short delay\n                    setTimeout(() => {\n                        const nextMove = this.parseMove(result.nextMove);\n                        this.makeMove(nextMove);\n                        this.previousMoves.push(nextMove);\n                        this.addMoveToHistory(nextMove);\n                    }, 500);\n                }\n            } else {\n                this.updateStatus('Incorrect move. Try again.', 'error');\n                return 'snapback';\n            }\n        } catch (error) {\n            console.error('Error validating move:', error);\n            this.updateStatus('Failed to validate move', 'error');\n            return 'snapback';\n        }\n    }\n\n    parseMove(moveString) {\n        return {\n            from: moveString.substring(0, 2),\n            to: moveString.substring(2, 4),\n            promotion: moveString.length > 4 ? moveString[4] : undefined\n        };\n    }\n\n    async getHint() {\n        try {\n            const response = await fetch(\n                `/api/puzzles/${this.currentPuzzle.id}/hint?moveCount=${this.previousMoves.length}`\n            );\n            if (!response.ok) throw new Error('Failed to get hint');\n            \n            const hint = await response.json();\n            this.showHint(hint);\n        } catch (error) {\n            console.error('Error getting hint:', error);\n            this.updateStatus('Failed to get hint', 'error');\n        }\n    }\n\n    showHint(hint) {\n        this.updateStatus(hint.text);\n        if (hint.highlightSquares) {\n            // TODO: Implement square highlighting\n        }\n    }\n\n    async onPuzzleSolved() {\n        this.isComplete = true;\n        this.updateStatus('Puzzle solved! Well done!', 'success');\n        this.elements.nextBtn.style.display = 'block';\n\n        try {\n            await fetch(`/api/puzzles/${this.currentPuzzle.id}/submit`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    solved: true,\n                    timeSpent: Math.round((Date.now() - this.startTime) / 1000)\n                })\n            });\n        } catch (error) {\n            console.error('Error submitting solution:', error);\n        }\n    }\n\n    makeMove(move) {\n        const result = this.game.move({\n            from: move.from,\n            to: move.to,\n            promotion: move.promotion\n        });\n\n        if (result) {\n            this.board.position(this.game.fen());\n            return true;\n        }\n        return false;\n    }\n\n    addMoveToHistory(move) {\n        const moveNumber = Math.floor((this.previousMoves.length + 1) / 2);\n        const moveText = this.game.history().pop();\n        \n        const moveElement = document.createElement('div');\n        moveElement.className = 'move';\n        moveElement.textContent = `${moveNumber}. ${moveText}`;\n        \n        this.elements.moveList.appendChild(moveElement);\n        this.elements.moveList.scrollTop = this.elements.moveList.scrollHeight;\n    }\n\n    resetPuzzle() {\n        if (this.currentPuzzle) {\n            this.setPuzzle(this.currentPuzzle);\n        }\n    }\n\n    async loadNextPuzzle() {\n        try {\n            const response = await fetch('/api/puzzles/next');\n            if (!response.ok) throw new Error('Failed to load next puzzle');\n            \n            const puzzle = await response.json();\n            this.setPuzzle(puzzle);\n        } catch (error) {\n            console.error('Error loading next puzzle:', error);\n            this.updateStatus('Failed to load next puzzle', 'error');\n        }\n    }\n\n    updateStatus(message, type = 'info') {\n        this.elements.status.textContent = message;\n        this.elements.status.className = `status-message ${type}`;\n    }\n\n    onDragStart(source, piece) {\n        // Don't allow moves if puzzle is complete\n        if (this.isComplete) return false;\n\n        // Only allow moves for the correct color\n        const turn = this.game.turn();\n        if ((turn === 'w' && piece.search(/^b/) !== -1) ||\n            (turn === 'b' && piece.search(/^w/) !== -1)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    async onDrop(source, target, piece) {\n        const move = {\n            from: source,\n            to: target,\n            promotion: 'q' // Always promote to queen for simplicity\n        };\n\n        // Check if move is legal\n        if (!this.game.move(move)) {\n            return 'snapback';\n        }\n\n        // Undo the move in the game (will be re-applied if valid)\n        this.game.undo();\n\n        // Validate the move against the puzzle solution\n        return await this.validateMove(move);\n    }\n\n    onSnapEnd() {\n        this.board.position(this.game.fen());\n    }\n}\n\n// Initialize puzzle solver when document is ready\ndocument.addEventListener('DOMContentLoaded', () => {\n    window.puzzleSolver = new PuzzleSolver();\n}); "],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","_defineProperties","_toPropertyKey","key","toPrimitive","String","Number","_toPrimitive","PuzzleSolver","_classCallCheck","this","board","game","Chess","currentPuzzle","previousMoves","startTime","isComplete","elements","document","getElementById","title","description","rating","themes","moveList","status","resetBtn","hintBtn","nextBtn","initializeBoard","setupEventListeners","loadPuzzle","_this","config","draggable","position","onDragStart","bind","onDrop","onSnapEnd","pieceTheme","Chessboard","window","addEventListener","resize","_this2","resetPuzzle","getHint","loadNextPuzzle","_loadPuzzle","_callee","puzzleId","response","puzzle","_context","location","pathname","split","fetch","concat","ok","json","setPuzzle","t0","console","error","updateStatus","load","fen","Date","now","textContent","join","innerHTML","style","display","_validateMove","_callee2","move","result","_this3","_context2","id","headers","body","JSON","stringify","from","to","promotion","correct","addMoveToHistory","completed","onPuzzleSolved","nextMove","setTimeout","parseMove","makeMove","_x","moveString","substring","undefined","_getHint","_callee3","hint","_context3","showHint","text","highlightSquares","_onPuzzleSolved","_callee4","_context4","solved","timeSpent","Math","round","moveNumber","floor","moveText","history","moveElement","createElement","className","appendChild","scrollTop","scrollHeight","_loadNextPuzzle","_callee5","_context5","message","source","piece","turn","search","_onDrop","_callee6","target","_context6","undo","validateMove","_x2","_x3","_x4","puzzleSolver"],"sourceRoot":""}