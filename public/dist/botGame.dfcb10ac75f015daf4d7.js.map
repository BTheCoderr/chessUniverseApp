{"version":3,"file":"botGame.dfcb10ac75f015daf4d7.js","mappings":"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","sources":["webpack://simplechessapp/./public/js/botGame.js"],"sourcesContent":["class BotGame {\n    constructor() {\n        this.board = null;\n        this.game = new Chess();\n        this.stockfish = null;\n        this.currentBot = null;\n        this.gameStarted = false;\n        this.playerColor = 'white';\n        this.timeControl = null;\n        this.gameType = 'standard';\n        \n        this.initializeBoard();\n        this.initializeStockfish();\n        this.setupEventListeners();\n    }\n    \n    initializeBoard() {\n        const config = {\n            position: 'start',\n            orientation: this.playerColor,\n            draggable: true,\n            onDragStart: this.onDragStart.bind(this),\n            onDrop: this.onDrop.bind(this),\n            onSnapEnd: this.onSnapEnd.bind(this)\n        };\n        \n        this.board = Chessboard('board', config);\n        $(window).resize(() => this.board.resize());\n    }\n    \n    async initializeStockfish() {\n        try {\n            this.stockfish = await ChessAnalysisService.initStockfish();\n            this.stockfish.onmessage = this.handleStockfishMessage.bind(this);\n        } catch (error) {\n            console.error('Failed to initialize Stockfish:', error);\n        }\n    }\n    \n    setupEventListeners() {\n        $('#startGameBtn').on('click', () => this.startNewGame());\n        $('#resignBtn').on('click', () => this.resignGame());\n        $('#drawBtn').on('click', () => this.offerDraw());\n        $('#newGameBtn').on('click', () => this.showBotSelectionModal());\n        $('#playAgainBtn').on('click', () => this.showBotSelectionModal());\n        \n        // Game type and time control changes\n        $('#gameType').on('change', (e) => {\n            this.gameType = e.target.value;\n        });\n        \n        $('#timeControl').on('change', (e) => {\n            this.timeControl = e.target.value;\n        });\n    }\n    \n    startNewGame() {\n        const selectedBot = $('.bot-profile-card.selected').data('bot');\n        if (!selectedBot) {\n            alert('Please select a bot opponent');\n            return;\n        }\n        \n        this.currentBot = selectedBot;\n        this.gameStarted = true;\n        this.game.reset();\n        this.board.position('start');\n        \n        // Update UI with bot information\n        $('.player-info.black .player-name').text(selectedBot.name);\n        $('.player-info.black .player-rating').text(`Elo: ${selectedBot.rating}`);\n        $('.bot-info-panel .personality').text(selectedBot.personality);\n        $('.bot-info-panel .style').text(selectedBot.style);\n        $('.bot-info-panel .thinking-time').text(`${selectedBot.thinkingTime}s`);\n        \n        $('#botSelectionModal').modal('hide');\n        \n        if (this.playerColor === 'black') {\n            this.makeBotMove();\n        }\n    }\n    \n    onDragStart(source, piece) {\n        if (!this.gameStarted || this.game.game_over() || \n            piece.search(/^b/) !== -1 || \n            this.game.turn() !== this.playerColor[0]) {\n            return false;\n        }\n        return true;\n    }\n    \n    onDrop(source, target) {\n        const move = {\n            from: source,\n            to: target,\n            promotion: 'q' // Always promote to queen for simplicity\n        };\n        \n        const legalMove = this.game.move(move);\n        if (legalMove === null) return 'snapback';\n        \n        this.updateGameState();\n        this.makeBotMove();\n    }\n    \n    onSnapEnd() {\n        this.board.position(this.game.fen());\n    }\n    \n    async makeBotMove() {\n        if (this.game.game_over()) return;\n        \n        try {\n            const fen = this.game.fen();\n            const timeLimit = this.currentBot.thinkingTime * 1000; // Convert to milliseconds\n            \n            const bestMove = await ChessAnalysisService.getBestMove(fen, timeLimit, true);\n            \n            if (bestMove) {\n                this.game.move(bestMove);\n                this.board.position(this.game.fen());\n                this.updateGameState();\n            }\n        } catch (error) {\n            console.error('Error making bot move:', error);\n        }\n    }\n    \n    updateGameState() {\n        // Update move list\n        const moves = this.game.history({ verbose: true });\n        this.updateMoveList(moves);\n        \n        // Update game statistics\n        this.updateGameStats();\n        \n        // Check for game over\n        if (this.game.game_over()) {\n            this.handleGameOver();\n        }\n        \n        // Request position evaluation\n        this.requestEvaluation();\n    }\n    \n    updateMoveList(moves) {\n        const moveList = $('.move-list');\n        moveList.empty();\n        \n        moves.forEach((move, index) => {\n            if (index % 2 === 0) {\n                moveList.append(`<div class=\"move-pair\">${Math.floor(index/2 + 1)}. ${move.san}`);\n            } else {\n                moveList.find('.move-pair:last').append(` ${move.san}</div>`);\n            }\n        });\n        \n        moveList.scrollTop(moveList[0].scrollHeight);\n    }\n    \n    updateGameStats() {\n        const material = this.calculateMaterialBalance();\n        $('.material-balance').text(material > 0 ? `+${material}` : material);\n        \n        const moves = this.game.history().length;\n        $('.move-count').text(moves);\n        \n        // Update timers and average move time\n        // Implementation depends on time control system\n    }\n    \n    calculateMaterialBalance() {\n        const pieceValues = {\n            p: 1, n: 3, b: 3, r: 5, q: 9\n        };\n        \n        let balance = 0;\n        const position = this.game.board();\n        \n        position.forEach(row => {\n            row.forEach(piece => {\n                if (piece) {\n                    const value = pieceValues[piece.type.toLowerCase()];\n                    balance += piece.color === 'w' ? value : -value;\n                }\n            });\n        });\n        \n        return balance;\n    }\n    \n    requestEvaluation() {\n        if (!this.stockfish) return;\n        \n        const fen = this.game.fen();\n        this.stockfish.postMessage('position fen ' + fen);\n        this.stockfish.postMessage('go depth 20');\n    }\n    \n    handleStockfishMessage(event) {\n        const message = event.data;\n        \n        if (message.startsWith('info')) {\n            if (message.includes('score cp')) {\n                const score = parseInt(message.split('score cp ')[1]) / 100;\n                this.updateEvaluation(score);\n            }\n            if (message.includes('pv')) {\n                const bestMove = message.split('pv ')[1].split(' ')[0];\n                $('.best-move .move').text(bestMove);\n            }\n        }\n    }\n    \n    updateEvaluation(score) {\n        $('.eval-score').text(score.toFixed(1));\n        \n        // Update evaluation bar\n        const normalizedScore = Math.max(-5, Math.min(5, score)); // Clamp between -5 and 5\n        const percentage = ((normalizedScore + 5) / 10) * 100;\n        $('.eval-fill').css('height', `${percentage}%`);\n    }\n    \n    handleGameOver() {\n        let result = '';\n        if (this.game.in_checkmate()) {\n            result = this.game.turn() === 'w' ? 'Black wins by checkmate' : 'White wins by checkmate';\n        } else if (this.game.in_draw()) {\n            if (this.game.in_stalemate()) {\n                result = 'Draw by stalemate';\n            } else if (this.game.in_threefold_repetition()) {\n                result = 'Draw by repetition';\n            } else if (this.game.insufficient_material()) {\n                result = 'Draw by insufficient material';\n            } else {\n                result = 'Draw';\n            }\n        }\n        \n        $('.result-message').text(result);\n        $('#gameOverModal').modal('show');\n    }\n    \n    resignGame() {\n        if (!this.gameStarted) return;\n        \n        this.gameStarted = false;\n        $('.result-message').text('Game resigned - ' + \n            (this.playerColor === 'white' ? 'Black' : 'White') + ' wins');\n        $('#gameOverModal').modal('show');\n    }\n    \n    offerDraw() {\n        // Implement draw offer logic based on bot personality\n        // For now, always reject\n        alert('Draw offer declined by ' + this.currentBot.name);\n    }\n    \n    showBotSelectionModal() {\n        // Load bot profiles\n        const bots = [\n            {\n                name: 'Rookie Bot',\n                rating: 1200,\n                personality: 'Beginner',\n                style: 'Standard',\n                thinkingTime: 1\n            },\n            {\n                name: 'Advanced Bot',\n                rating: 1800,\n                personality: 'Aggressive',\n                style: 'Tactical',\n                thinkingTime: 2\n            },\n            {\n                name: 'Master Bot',\n                rating: 2200,\n                personality: 'Positional',\n                style: 'Strategic',\n                thinkingTime: 3\n            }\n        ];\n        \n        const botProfiles = $('.bot-profiles');\n        botProfiles.empty();\n        \n        bots.forEach(bot => {\n            const card = $(`\n                <div class=\"bot-profile-card\" data-bot='${JSON.stringify(bot)}'>\n                    <h6>${bot.name}</h6>\n                    <div>Rating: ${bot.rating}</div>\n                    <div>Style: ${bot.style}</div>\n                </div>\n            `);\n            \n            card.on('click', function() {\n                $('.bot-profile-card').removeClass('selected');\n                $(this).addClass('selected');\n            });\n            \n            botProfiles.append(card);\n        });\n        \n        $('#botSelectionModal').modal('show');\n    }\n}\n\n// Initialize the game when the document is ready\nif (typeof window !== 'undefined') {\n    $(document).ready(() => {\n        window.botGame = new BotGame();\n    });\n}\n\n// Export for testing\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = BotGame;\n} "],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","_defineProperties","_toPropertyKey","key","toPrimitive","String","Number","_toPrimitive","BotGame","_classCallCheck","this","board","game","Chess","stockfish","currentBot","gameStarted","playerColor","timeControl","gameType","initializeBoard","initializeStockfish","setupEventListeners","_this","config","position","orientation","draggable","onDragStart","bind","onDrop","onSnapEnd","Chessboard","$","window","resize","_initializeStockfish","_callee","_context","ChessAnalysisService","initStockfish","onmessage","handleStockfishMessage","t0","console","error","_this2","on","startNewGame","resignGame","offerDraw","showBotSelectionModal","target","selectedBot","data","text","concat","rating","personality","style","thinkingTime","modal","makeBotMove","alert","source","piece","game_over","search","turn","move","from","to","promotion","updateGameState","fen","_makeBotMove","_callee2","timeLimit","bestMove","_context2","getBestMove","moves","history","verbose","updateMoveList","updateGameStats","handleGameOver","requestEvaluation","moveList","empty","index","append","Math","floor","san","find","scrollTop","scrollHeight","material","calculateMaterialBalance","pieceValues","b","q","balance","row","toLowerCase","color","postMessage","event","message","startsWith","includes","score","parseInt","split","updateEvaluation","toFixed","percentage","max","min","css","result","in_checkmate","in_draw","in_stalemate","in_threefold_repetition","insufficient_material","botProfiles","bot","card","JSON","stringify","removeClass","addClass","document","ready","botGame","module","exports"],"sourceRoot":""}