{"version":3,"file":"betting.af3d5fd2592c98177767.js","mappings":"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","sources":["webpack://simplechessapp/./public/js/betting.js"],"sourcesContent":["class BettingUI {\n    constructor() {\n        this.socket = io();\n        this.selectedBets = new Map();\n        this.board = null;\n        this.game = new Chess();\n        this.marketData = null;\n        \n        this.initializeSocket();\n        this.initializeChessboard();\n        this.initializeEventListeners();\n    }\n\n    initializeSocket() {\n        // Connect to betting namespace\n        this.socket.on('connect', () => {\n            console.log('Connected to server');\n            this.socket.emit('subscribeToBets', gameId);\n        });\n\n        // Listen for market updates\n        this.socket.on('marketUpdate', (data) => {\n            this.updateMarkets(data);\n        });\n\n        // Listen for bet confirmations\n        this.socket.on('betPlaced', (data) => {\n            this.handleBetPlaced(data);\n        });\n\n        // Listen for game state updates\n        this.socket.on('gameState', (data) => {\n            this.updateGameState(data);\n        });\n    }\n\n    initializeChessboard() {\n        const config = {\n            position: 'start',\n            orientation: playerColor,\n            draggable: false,\n            pieceTheme: '/img/chesspieces/{piece}.png'\n        };\n\n        this.board = Chessboard('game-board', config);\n        $(window).resize(() => this.board.resize());\n    }\n\n    initializeEventListeners() {\n        // Market selection\n        $('.markets-grid').on('click', '.odds-button', (e) => {\n            const button = $(e.currentTarget);\n            const marketId = button.data('market-id');\n            const choice = button.data('choice');\n            const odds = button.data('odds');\n            \n            this.toggleBetSelection(marketId, choice, odds);\n        });\n\n        // Place bet\n        $('.bet-slip .btn-success').on('click', () => {\n            this.placeBet();\n        });\n\n        // Stake input\n        $('.bet-slip input[type=\"number\"]').on('input', (e) => {\n            this.updatePotentialReturns(e.target.value);\n        });\n\n        // Chat controls\n        $('.chat-input input').on('keypress', (e) => {\n            if (e.which === 13) {\n                this.sendChatMessage();\n            }\n        });\n\n        $('.chat-controls .btn-primary').on('click', () => {\n            this.sendChatMessage();\n        });\n\n        // Voice message\n        $('.chat-controls .btn-secondary').on('click', () => {\n            this.startVoiceRecording();\n        });\n\n        // Screen share\n        $('.chat-controls .btn-info').on('click', () => {\n            this.startScreenSharing();\n        });\n    }\n\n    updateMarkets(data) {\n        this.marketData = data;\n        const marketsGrid = $('.markets-grid');\n        marketsGrid.empty();\n\n        data.markets.forEach(market => {\n            const marketCard = this.createMarketCard(market);\n            marketsGrid.append(marketCard);\n        });\n    }\n\n    createMarketCard(market) {\n        const card = $('<div>').addClass('market-card');\n        \n        const header = $('<h4>').text(market.name);\n        card.append(header);\n\n        const oddsContainer = $('<div>').addClass('odds-container');\n        \n        Object.entries(market.odds).forEach(([choice, odds]) => {\n            const button = $('<button>')\n                .addClass('odds-button')\n                .attr({\n                    'data-market-id': market.id,\n                    'data-choice': choice,\n                    'data-odds': odds\n                })\n                .text(`${choice} (${odds})`);\n\n            if (this.selectedBets.has(`${market.id}-${choice}`)) {\n                button.addClass('selected');\n            }\n\n            oddsContainer.append(button);\n        });\n\n        card.append(oddsContainer);\n        return card;\n    }\n\n    toggleBetSelection(marketId, choice, odds) {\n        const betKey = `${marketId}-${choice}`;\n        \n        if (this.selectedBets.has(betKey)) {\n            this.selectedBets.delete(betKey);\n            $(`.odds-button[data-market-id=\"${marketId}\"][data-choice=\"${choice}\"]`).removeClass('selected');\n        } else {\n            this.selectedBets.set(betKey, { marketId, choice, odds });\n            $(`.odds-button[data-market-id=\"${marketId}\"][data-choice=\"${choice}\"]`).addClass('selected');\n        }\n\n        this.updateBetSlip();\n    }\n\n    updateBetSlip() {\n        const selectedBets = $('.selected-bets');\n        selectedBets.empty();\n\n        this.selectedBets.forEach(bet => {\n            const betElement = $('<div>').addClass('selected-bet')\n                .append($('<span>').text(`${bet.choice} @ ${bet.odds}`))\n                .append(\n                    $('<button>').addClass('btn btn-sm btn-danger')\n                        .text('Remove')\n                        .on('click', () => this.toggleBetSelection(bet.marketId, bet.choice, bet.odds))\n                );\n            \n            selectedBets.append(betElement);\n        });\n\n        this.updatePotentialReturns($('.bet-slip input[type=\"number\"]').val());\n    }\n\n    updatePotentialReturns(stake) {\n        if (!stake || this.selectedBets.size === 0) {\n            $('.potential-returns').text('$0.00');\n            return;\n        }\n\n        const totalOdds = Array.from(this.selectedBets.values())\n            .reduce((acc, bet) => acc * parseFloat(bet.odds), 1);\n        \n        const potentialReturns = (parseFloat(stake) * totalOdds).toFixed(2);\n        $('.potential-returns').text(`$${potentialReturns}`);\n    }\n\n    async placeBet() {\n        const stake = parseFloat($('.bet-slip input[type=\"number\"]').val());\n        \n        if (!stake || this.selectedBets.size === 0) {\n            alert('Please select bets and enter a stake amount');\n            return;\n        }\n\n        const bets = Array.from(this.selectedBets.values()).map(bet => ({\n            marketId: bet.marketId,\n            choice: bet.choice,\n            odds: bet.odds,\n            stake\n        }));\n\n        try {\n            const response = await fetch('/betting/api/place-bet', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ bets })\n            });\n\n            const result = await response.json();\n            \n            if (result.success) {\n                this.selectedBets.clear();\n                this.updateBetSlip();\n                alert('Bet placed successfully!');\n            } else {\n                alert(result.error || 'Failed to place bet');\n            }\n        } catch (error) {\n            console.error('Error placing bet:', error);\n            alert('Failed to place bet');\n        }\n    }\n\n    updateGameState(data) {\n        if (data.fen) {\n            this.game.load(data.fen);\n            this.board.position(data.fen);\n        }\n\n        // Update timers\n        $('.player-info.white .player-time').text(this.formatTime(data.timeLeft.white));\n        $('.player-info.black .player-time').text(this.formatTime(data.timeLeft.black));\n\n        // Update game status\n        $('.game-status .status-text').text(data.status);\n    }\n\n    formatTime(seconds) {\n        const minutes = Math.floor(seconds / 60);\n        const remainingSeconds = seconds % 60;\n        return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n    }\n\n    async sendChatMessage() {\n        const input = $('.chat-input input');\n        const message = input.val().trim();\n        \n        if (!message) return;\n\n        try {\n            await this.socket.emit('chatMessage', {\n                roomId: gameId,\n                message,\n                type: 'text'\n            });\n            \n            input.val('');\n        } catch (error) {\n            console.error('Error sending message:', error);\n            alert('Failed to send message');\n        }\n    }\n\n    async startVoiceRecording() {\n        try {\n            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n            const mediaRecorder = new MediaRecorder(stream);\n            const chunks = [];\n\n            mediaRecorder.ondataavailable = (e) => chunks.push(e.data);\n            mediaRecorder.onstop = async () => {\n                const blob = new Blob(chunks, { type: 'audio/webm' });\n                await this.uploadMedia(blob, 'audio');\n                stream.getTracks().forEach(track => track.stop());\n            };\n\n            mediaRecorder.start();\n            setTimeout(() => mediaRecorder.stop(), 30000); // 30 second limit\n        } catch (error) {\n            console.error('Error starting voice recording:', error);\n            alert('Failed to start voice recording');\n        }\n    }\n\n    async startScreenSharing() {\n        try {\n            const stream = await navigator.mediaDevices.getDisplayMedia({ video: true });\n            const mediaRecorder = new MediaRecorder(stream);\n            const chunks = [];\n\n            mediaRecorder.ondataavailable = (e) => chunks.push(e.data);\n            mediaRecorder.onstop = async () => {\n                const blob = new Blob(chunks, { type: 'video/webm' });\n                await this.uploadMedia(blob, 'video');\n                stream.getTracks().forEach(track => track.stop());\n            };\n\n            mediaRecorder.start();\n            setTimeout(() => mediaRecorder.stop(), 60000); // 1 minute limit\n        } catch (error) {\n            console.error('Error starting screen sharing:', error);\n            alert('Failed to start screen sharing');\n        }\n    }\n\n    async uploadMedia(blob, type) {\n        const formData = new FormData();\n        formData.append('file', blob);\n\n        try {\n            const response = await fetch('/betting/api/upload', {\n                method: 'POST',\n                body: formData\n            });\n\n            const result = await response.json();\n            \n            if (result.success) {\n                await this.socket.emit('chatMessage', {\n                    roomId: gameId,\n                    type,\n                    content: result.url\n                });\n            } else {\n                throw new Error(result.error || 'Upload failed');\n            }\n        } catch (error) {\n            console.error('Error uploading media:', error);\n            alert('Failed to upload media');\n        }\n    }\n}\n\n// Initialize betting UI when document is ready\n$(document).ready(() => {\n    window.bettingUI = new BettingUI();\n}); "],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","_slicedToArray","Array","isArray","_arrayWithHoles","_iterableToArrayLimit","_arrayLikeToArray","toString","from","test","_unsupportedIterableToArray","_nonIterableRest","_defineProperties","_toPropertyKey","key","toPrimitive","String","Number","_toPrimitive","BettingUI","_classCallCheck","this","socket","io","selectedBets","Map","board","game","Chess","marketData","initializeSocket","initializeChessboard","initializeEventListeners","_this","on","console","log","emit","gameId","data","updateMarkets","handleBetPlaced","updateGameState","_this2","config","position","orientation","playerColor","draggable","pieceTheme","Chessboard","$","window","resize","_this3","button","currentTarget","marketId","choice","odds","toggleBetSelection","placeBet","updatePotentialReturns","target","which","sendChatMessage","startVoiceRecording","startScreenSharing","_this4","marketsGrid","empty","markets","market","marketCard","createMarketCard","append","_this5","card","addClass","header","text","oddsContainer","entries","_ref","_ref2","attr","id","concat","has","betKey","removeClass","set","updateBetSlip","_this6","bet","betElement","val","stake","size","totalOdds","reduce","acc","parseFloat","potentialReturns","toFixed","_placeBet","_callee","bets","response","result","_context","alert","map","fetch","headers","body","JSON","stringify","json","success","clear","error","t0","fen","load","formatTime","timeLeft","white","black","status","seconds","minutes","Math","floor","remainingSeconds","padStart","_sendChatMessage","_callee2","input","message","_context2","trim","roomId","_startVoiceRecording","_callee4","stream","mediaRecorder","chunks","_this7","_context4","navigator","mediaDevices","getUserMedia","audio","MediaRecorder","ondataavailable","onstop","_callee3","blob","_context3","Blob","uploadMedia","getTracks","track","start","setTimeout","_startScreenSharing","_callee6","_this8","_context6","getDisplayMedia","video","_callee5","_context5","_uploadMedia","_callee7","formData","_context7","FormData","content","url","_x","_x2","document","ready","bettingUI"],"sourceRoot":""}